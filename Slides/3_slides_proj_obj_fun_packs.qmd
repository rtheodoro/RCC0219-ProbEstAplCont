---
title: "Projetos, Objetos, Funções e Pacotes"
author: "Ricardo Theodoro"
institute: "OBSCOOP/USP"
format: 
   revealjs:
     self-contained: true
     logo: img/obscoopusp_logo.png
     slide-number: true
     show-slide-number: all
     preview-links: auto
     width: 1280
     height: 720
     theme: default
   beamer:
     slide-number: true
     show-slide-number: all
     preview-links: auto
     aspectratio: 169
     theme: Luebeck
editor: visual
execute:
  echo: true
  cache: true
---

## Projetos

O que é um projeto?

-   Um projeto é uma pasta no seu computador em que estarão todos os arquivos que você usurá ou criará na sua análise.

Por que criar um projeto?

-   Organização!

## Como criar um Projeto?

File -\> New Project...

::: columns
::: {.column width="40%"}
![](img/rstudio_newproject.png)
:::

::: {.column width="60%"}
**New Directory** -\> Cria o pojeto em uma pasta nova

**Existing Directory** -\> Cria o projeto em uma pasta existente

**Version Control** -\> Baixa um projeto do Github, por exemplo
:::
:::

## Verificando o Projetos

![](img/rstudio_projeto.png)

## Objetos

São nomes que guardam valores.

::: columns
::: {.column width="60%"}
-   Variável

```{r}
# Salvando `1` em `a`
a <- 1
# Avaliando o objeto `a`
a

# Salvando `2` em `A`
A <- 2
# Avaliando o objeto `A`
A
```
:::

::: {.column width="40%"}
**ATENÇÃO**:

-   O R diferencia letras maiúsculas de minísculas

-   Não utilizem caracteres especiais, apenas \_

-   O nome deve representar seu valor
:::
:::

## Classes dos Objetos

A classe de um objeto define o tipo de valor armezenado nele.

É a partir dela que as funções e operadores conseguem saber exatamente o que fazer com um objeto.

## Classes dos Objetos

Para saber a classe de um objeto, basta rodarmos class(nome-do-objeto).

```{r}
x <- 1
class(x)
```

```{r}
y <- "a"
class(y)
```

```{r}
class(mtcars)
```

```{r}
class(TRUE)
```

## Vetores

Vetores são apenas conjuntos indexados de valores.

Cada coluna de um data frame será representada como um vetor.

```{r}
vetor_num <- c(1, 2, 3)
class(vetor_num)
```

```{r}
vetor_letras <- c("a", "b", "c")
class(vetor_letras)
```

```{r}
vetor_num_letras <- c("a", 3, "c")
class(vetor_num_letras)
```

## Trabalhando com objetos e vetores

-   Criando sequência

```{r}
vetor_1a10 <- 1:10
```

```{r}
vetor_10a1 <- 10:1
```

```{r}
vetor_10a1[3] # Peguando um número na sequência
```

```{r}
vetor_10a1[3:7] # Extraindo valor de um conjunto
```

## Operações com vetores

```{r}
vetor_10a1 + 6
```

```{r}
vetor_10a1 + vetor_num 
# Reparem que como um vetor é menor que o outro, o R recicla a diferença
```

## Pertence

Como verificar se um valor está dentro de um vetor?

```{r}
c(1, 2, 3) %in% vetor_1a10
vetor_num %in% vetor_1a10
```

## Funções

São nomes que guardam um código de R.

Sempre que você precisar repetir um trecho de código para realizar uma tarefa, você deve criar uma função e utilizá-lá.

Exemplo: função soma

```{r}
sum(a, A)
# sum() é a função
# a e A são os argumentos da função
```

Os valores dentro do parênteses da função são chamados de argumentos e serão utilizados como parâmetros para cálculo do resultado.

## Criando Funções

Podemos criar nosas próprias funções

```{r}
soma_3_divide_2 <- function(valor){
   
   ({{ valor }} + 3) / 2
   
}

soma_3_divide_2(7)
soma_3_divide_2(18)
soma_3_divide_2(9)
```

Cada função deve realizar apenas uma tarefa!

## Pacotes

O que são pacotes?

-   São conjuntos de funções
-   Existem muitos pacotes já criados que facilitam a programação

Ex: Pacote `dplyr`. Pacote muito usado para tratamento de dados, como selecionar variáveis, filtrar valor, unir data.frames.

## Como instalar pacotes

Todo pacote precisa ser instalado uma vez

```{r}
install.packages("dplyr")
```

## Como chamar pacotes

Sempre, antes de usar, é preciso chamar o pacote

Duas formas de chamar:

1.  Carregar todas as funções presentes no pacote

```{r}
library(dplyr)
mtcars |>
   select(cyl, mpg) |>
   filter(mpg > 33)
```

## Como chamar pacotes

2.  Carregar apenas a função chamada, durante seu uso

```{r}
#pacote::funcao()

mtcars |>
   dplyr::select(cyl, mpg) |>
   dplyr::filter(mpg > 33)
```
